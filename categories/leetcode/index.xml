<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on Keiksy&#39;s NotePad</title>
    <link>https://keiksy.github.io/categories/leetcode/</link>
    <description>Recent content in LeetCode on Keiksy&#39;s NotePad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Apr 2020 13:08:32 +0800</lastBuildDate>
    
	<atom:link href="https://keiksy.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lc017</title>
      <link>https://keiksy.github.io/2020/lc017/</link>
      <pubDate>Thu, 16 Apr 2020 13:08:32 +0800</pubDate>
      
      <guid>https://keiksy.github.io/2020/lc017/</guid>
      <description>LeetCode 017 : Letter Combinations of a Phone Number 题面 Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
题意 给一个电话号码，每一个数字在电话上都有对应的按键，每个按键上都有3~4个字母，我们称这个数字代表了这几个字母，找出这串电话号码代表的所有字母串。
题解  迭代解法：  def letterCombinations(self, digits: str) -&amp;gt; List[str]: dict = {&amp;#39;2&amp;#39;: &amp;#34;abc&amp;#34;, &amp;#39;3&amp;#39;: &amp;#34;def&amp;#34;, &amp;#39;4&amp;#39;: &amp;#34;ghi&amp;#34;, &amp;#39;5&amp;#39;: &amp;#34;jkl&amp;#34;, &amp;#39;6&amp;#39;: &amp;#34;mno&amp;#34;, &amp;#39;7&amp;#39;: &amp;#34;pqrs&amp;#34;, &amp;#39;8&amp;#39;: &amp;#34;tuv&amp;#34;, &amp;#39;9&amp;#39;: &amp;#34;wxyz&amp;#34;} //如果给的digits是空串，则返回一个空列表 //如果digits不是空串，则将第一个字符设置为空字符串，方便后续append //cmb表示了所有的组合 cmb = [&amp;#39;&amp;#39;] if digits else [] for d in digits: //每一步都会给cmb里的已有结果串们加上新的最后一个字母 //例如cmb=[&amp;#39;&amp;#39;] -&amp;gt; cmb = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] cmb = [p + q for p in cmb for q in dict[d]] return cmb  回溯解法：  def letterCombinations(self, digits: str) -&amp;gt; List[str]: words = [&amp;#39;abc&amp;#39;,&amp;#39;def&amp;#39;,&amp;#39;ghi&amp;#39;,&amp;#39;jkl&amp;#39;,&amp;#39;mno&amp;#39;,&amp;#39;pqrs&amp;#39;,&amp;#39;tuv&amp;#39;,&amp;#39;wxyz&amp;#39;] ans = [] if len(digits)==0: return ans def helper(position, temp): if position==len(digits): ans.</description>
    </item>
    
    <item>
      <title>Lc015</title>
      <link>https://keiksy.github.io/2020/lc015/</link>
      <pubDate>Wed, 15 Apr 2020 00:59:08 +0800</pubDate>
      
      <guid>https://keiksy.github.io/2020/lc015/</guid>
      <description>LeetCode 015 : 3Sum 题面 Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero
题意 给一个数组，找仨数，这三个数加起来等于零，找出所有不重复的组合。
题解 最基础的解法：暴力O(n^3)。
优化：固定一个，双指针法找另两个。
其实里面坑还挺多的。
def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: ans = [] //排序方便查找 nums.sort() leng = len(nums) for i in range(leng): //如果第一个数就大于0，因为排过序，后面更大，不可能加起来等于0 if nums[i]&amp;gt;0: break //如果和第一个数数组中上一个数相同 //事实上，在以上一个数为第一个数的搜索中，就可以将这次所有的搜索结果包括 //因此，跳过去重 if i&amp;gt;0 and nums[i]==nums[i-1]: continue j, k = i+1, leng-1 while j&amp;lt;k: summ = nums[i]+nums[j]+nums[k] if summ&amp;lt;0: j+=1 elif summ&amp;gt;0: k-=1 else: ans.</description>
    </item>
    
  </channel>
</rss>