<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Hugo 主题 MemE</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2020-04-23T18:35:29+08:00</updated>
    <id>https://example.com/</id>
    <link rel="alternate" type="text/html" href="https://example.com/" />
    <link rel="self" type="application/atom+xml" href="https://example.com/atom.xml" />
    <author>
            <name>reuixiy</name>
            <uri>https://example.com/</uri>
            
                <email>reuixiy@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.69.0">Hugo</generator>
        <entry>
            <title type="text">A_new_hackintosh_build</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/a_new_hackintosh_build/" />
            <id>https://example.com/posts/a_new_hackintosh_build/</id>
            <updated>2020-04-23T18:24:19+08:00</updated>
            <published>2020-04-21T15:29:29+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[记一次黑苹果安装 这篇文章记录在全新电脑（白盘裸机）上安装macOS的方法和一些坑，以……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="记一次黑苹果安装">记一次黑苹果安装</h1>
<p>这篇文章记录在全新电脑（白盘裸机）上安装macOS的方法和一些坑，以备后面查阅。</p>
<h2 id="硬件概览">硬件概览</h2>
<table>
<thead>
<tr>
<th>硬件</th>
<th align="left">型号</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td align="left">i5-9400</td>
</tr>
<tr>
<td>硬盘</td>
<td align="left">西数SN550 500GB NVMe M.2 SSD</td>
</tr>
<tr>
<td>显卡</td>
<td align="left">UHD630 + 蓝宝石RX580 2048sp pulse</td>
</tr>
<tr>
<td>主板</td>
<td align="left">微星B360M迫击炮</td>
</tr>
</tbody>
</table>
<p>可能唯一的一个坑是这块rx580显卡，不过这坑是我自己要跳的，因为能打游戏又能黑苹果又能将价格压在1000元的全新显卡只有这一个，这块卡可以刷入rx570的vbios实现黑苹果免驱，我刷的是<a href="https://www.techpowerup.com/vgabios/218998/218998">这个</a>vbios，刷vbios的教程网上到处都有，只需要注意备份好原有的vbios，大概返厂维修会有点用（其实我想问卡都坏了还怎么点亮刷回去呢🐶）</p>
<p>最近有一个新的黑苹果引导工具：OpenCore。不过我真的学不动了，我的打算是以后稳定在Mojave系统上，所以先用熟悉的clover凑合吧。</p>
<h2 id="工具">工具</h2>
<ul>
<li>Windows 10 ISO镜像</li>
<li>macOS Mojave 10.14.5 dmg镜像</li>
<li>8GB高速U盘</li>
<li>软件：UltraISO，etcher，diskgen</li>
<li>clover EFI引导文件，我使用了<a href="https://github.com/SuperNG6/MSI-B360-Catalina-EFI">这里</a>的10.14系统专用的EFI，这份EFI在我的两台机器：i5-9400+msi B360M迫击炮+rx580和i5-9600K+msi Z390战斧导弹+uhd630上都可以很好地工作。</li>
</ul>
<h2 id="macoswin10单硬盘双系统安装步骤">macOS+win10单硬盘双系统安装步骤</h2>
<ol>
<li><strong>BIOS设置</strong>。对于这块微星主板，BIOS出厂设置的基础上只需要关闭CFG锁定就可以了。</li>
<li><strong>制作macOS启动盘</strong>。另找一台电脑，将macOS dmg镜像使用etcher写入U盘，并替换EFI文件。有些人可能还在使用TransMac，可以试一下etcher这款工具，你会真香的。</li>
<li><strong>安装macOS</strong>。安装macOS的步骤不需详谈。安装macOS后，在macOS的磁盘工具.app里分出一块空间，并将这块空间格式化为APFS文件系统，这块空间供Windows系统<del>和游戏</del>使用</li>
<li><strong>制作win10启动盘</strong>。使用UltraISO将U盘写入Windows 10安装镜像。这一步我遇到了2个坑：
<ol>
<li>UltraISO报”设备访问错误“：在diskgen里删除这块U盘上的所有分区，右键点击U盘选择转换为MBR分区表，提交操作后在Windows磁盘管理里新建一个分区并格式化为FAT32文件系统即可。</li>
<li>UltraISO报”Error formating NTFS volume X“：在制作启动盘界面点击“便捷启动”，选择“写入新的硬盘主引导记录（MBR）”，选择“USB-HDD+”，再次写入即可。</li>
</ol>
</li>
<li><strong>安装win10</strong>。引导U盘安装win10，分区选择时将上一步分出的APFS分区删除，再在这个分区里安装。</li>
</ol>
<p>简单五步即可成功，重启即可发现主板会自动加载clover，并且clover里有macOS和Windows 10的引导项，非常的简单优雅。我之前网上搜索到的单硬盘安装双系统都还要通过winPE或者easyUEFI等第三方工具进行一些操作实现，其实是不必要的。</p>
<h2 id="参考文献">参考文献</h2>
<ol>
<li><a href="https://www.techpowerup.com/vgabios/218998/218998">VBIOS来源</a></li>
<li><a href="https://osx.cx/rx580-2048sp-shua-vbios-rx570.html">刷VBIOS方法</a></li>
<li><a href="https://github.com/SuperNG6/MSI-B360-Catalina-EFI">稳定使用的EFI配置</a></li>
<li><a href="https://jingyan.baidu.com/article/d169e18687230b026711d818.html">UltraISO报”Error formating NTFS volume X“的解决方法</a></li>
</ol>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Lc019</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/lc019/" />
            <id>https://example.com/posts/lc019/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-04-16T14:42:38+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[]]></summary>
            
                <content type="html"><![CDATA[]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Lc017</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/lc017/" />
            <id>https://example.com/posts/lc017/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-04-16T13:08:32+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[LeetCode 017 : Letter Combinations of a Phone Number 题面 Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="leetcode-017--letter-combinations-of-a-phone-number">LeetCode 017 : Letter Combinations of a Phone Number</h1>
<h2 id="题面">题面</h2>
<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<h2 id="题意">题意</h2>
<p>给一个电话号码，每一个数字在电话上都有对应的按键，每个按键上都有3~4个字母，我们称这个数字代表了这几个字母，找出这串电话号码代表的所有字母串。</p>
<h2 id="题解">题解</h2>
<ul>
<li>迭代解法：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">letterCombinations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;2&#39;</span><span class="p">:</span> <span class="s2">&#34;abc&#34;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">:</span> <span class="s2">&#34;def&#34;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">:</span> <span class="s2">&#34;ghi&#34;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">:</span> <span class="s2">&#34;jkl&#34;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">:</span> <span class="s2">&#34;mno&#34;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">:</span> <span class="s2">&#34;pqrs&#34;</span><span class="p">,</span>
            <span class="s1">&#39;8&#39;</span><span class="p">:</span> <span class="s2">&#34;tuv&#34;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">:</span> <span class="s2">&#34;wxyz&#34;</span><span class="p">}</span>
    		<span class="o">//</span><span class="err">如果给的</span><span class="n">digits是空串</span><span class="err">，则返回一个空列表</span>
      	<span class="o">//</span><span class="err">如果</span><span class="n">digits不是空串</span><span class="err">，则将第一个字符设置为空字符串，方便后续</span><span class="n">append</span>
        <span class="o">//</span><span class="n">cmb表示了所有的组合</span>
        <span class="n">cmb</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="n">digits</span> <span class="k">else</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">digits</span><span class="p">:</span>
          	<span class="o">//</span><span class="err">每一步都会给</span><span class="n">cmb里的已有结果串们加上新的最后一个字母</span>
            <span class="o">//</span><span class="err">例如</span><span class="n">cmb</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">cmb</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
            <span class="n">cmb</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="o">+</span> <span class="n">q</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">cmb</span> <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">[</span><span class="n">d</span><span class="p">]]</span>
        <span class="k">return</span> <span class="n">cmb</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>回溯解法：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">letterCombinations</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
		<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span><span class="s1">&#39;def&#39;</span><span class="p">,</span><span class="s1">&#39;ghi&#39;</span><span class="p">,</span><span class="s1">&#39;jkl&#39;</span><span class="p">,</span><span class="s1">&#39;mno&#39;</span><span class="p">,</span><span class="s1">&#39;pqrs&#39;</span><span class="p">,</span><span class="s1">&#39;tuv&#39;</span><span class="p">,</span><span class="s1">&#39;wxyz&#39;</span><span class="p">]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
      	<span class="k">return</span> <span class="n">ans</span>
        
    <span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="n">temp</span><span class="p">):</span>
      	<span class="k">if</span> <span class="n">position</span><span class="o">==</span><span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">):</span>
          	<span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
            <span class="k">return</span>
    		<span class="n">word</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="n">position</span><span class="p">])</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
          	<span class="n">temp</span><span class="o">+=</span><span class="n">c</span>
            <span class="n">helper</span><span class="p">(</span><span class="n">position</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">temp</span><span class="p">)</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>        
    <span class="n">helper</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/%E7%AE%97%E6%B3%95/" term="算法" label="算法" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/leetcode/" term="LeetCode" label="LeetCode" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Lc015</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/lc015/" />
            <id>https://example.com/posts/lc015/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-04-15T00:59:08+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[LeetCode 015 : 3Sum 题面 Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="leetcode-015--3sum">LeetCode 015 : 3Sum</h1>
<h2 id="题面">题面</h2>
<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero</p>
<h2 id="题意">题意</h2>
<p>给一个数组，找仨数，这三个数加起来等于零，找出所有不重复的组合。</p>
<h2 id="题解">题解</h2>
<p>最基础的解法：暴力O(n^3)。</p>
<p>优化：固定一个，双指针法找另两个。</p>
<p>其实里面坑还挺多的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">threeSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
		<span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="o">//</span><span class="err">排序方便查找</span>
  	<span class="n">nums</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
        
    <span class="n">leng</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">leng</span><span class="p">):</span>
      	<span class="o">//</span><span class="err">如果第一个数就大于</span><span class="mi">0</span><span class="err">，因为排过序，后面更大，不可能加起来等于</span><span class="mi">0</span>
    		<span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
      			<span class="k">break</span>
        <span class="o">//</span><span class="err">如果和第一个数数组中上一个数相同</span>
        <span class="o">//</span><span class="err">事实上，在以上一个数为第一个数的搜索中，就可以将这次所有的搜索结果包括</span>
        <span class="o">//</span><span class="err">因此，跳过去重</span>
      	<span class="k">if</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        		<span class="k">continue</span>
      	<span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">leng</span><span class="o">-</span><span class="mi">1</span>
      	<span class="k">while</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">k</span><span class="p">:</span>
            <span class="n">summ</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">summ</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">j</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">summ</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">k</span><span class="o">-=</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
              	<span class="n">ans</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]])</span>
                <span class="o">//</span><span class="err">在这里</span><span class="n">j不要跟i一样和上一个数字比</span><span class="err">，很容易误伤</span>
                <span class="o">//</span><span class="err">只有当产生了一个解时，再跳过所有重复的数字是合理的</span>
              	<span class="k">while</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">k</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">j</span><span class="o">+=</span><span class="mi">1</span>
                <span class="k">while</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">k</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">k</span><span class="o">-=</span><span class="mi">1</span>
                <span class="n">j</span><span class="o">+=</span><span class="mi">1</span>
                <span class="n">k</span><span class="o">-=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/%E7%AE%97%E6%B3%95/" term="算法" label="算法" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/leetcode/" term="LeetCode" label="LeetCode" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">我真的需要一台MacBook Pro吗</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/buying_mbp_or_not/" />
            <id>https://example.com/posts/buying_mbp_or_not/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-03-10T05:58:07+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[疯狂分析 今天拿到了心心念念的MacBook Pro 16''，这台Mac在苹果中国官网使用教……]]></summary>
            
                <content type="html"><![CDATA[<p><em>疯狂分析</em></p>
<p>今天拿到了心心念念的MacBook Pro 16''，这台Mac在苹果中国官网使用教育优惠以￥17399购入，拥有一台Mac也算是我从初中就开始的梦想了。<del>然而最终还要靠啃老实现</del></p>
<p>使用一天过后，我发现MBP其实并不是我心中那台完美的笔记本电脑，仅仅第一天我就发现了一些问题：没有USB-A接口；有脱落涂层风险的镜面屏；所谓的妙控键盘手感不仅不如我之前的XPS13，甚至不如5年前的MacBook Air 2015；有些情况下风扇声太大，说是拖拉机毫不过分。说实在的，心里是有一些失望的。</p>
<p>目前我在家里有一台安装了macOS Catalina的XPS13 2015，学校实验室也有一台安装了macOS Catalina的戴尔台式机，我还为它配了一块27寸的4K显示器。作为在学校的代码主力机。实际上它目前还有着相当不错的使用体验。</p>
<p><strong>所以我究竟为什么要又买一台配置差不多的MacBook Pro呢</strong>？希望可以通过本文的书写逐渐理清思路，做出正确的购买决策<del>退货</del>。</p>
<h2 id="购买动机分析">购买动机分析</h2>
<ol>
<li>
<p>如果今年没有爆发新冠病毒疫情，我能按时返校，那么一定不会购买MacBook Pro。</p>
</li>
<li>
<p>我在家里只能使用XPS13，它的13寸屏幕太小，分辨率只有1080p，处理器是第五代双核i5，写代码体验较差。</p>
<ul>
<li>
<p><strong>那么究竟差在哪里呢</strong>？大概是因为屏幕和处理器。屏幕满眼狗牙，双核低电压处理器在开启多个Chrome标签页时会出现卡顿。</p>
</li>
<li>
<p><strong>那么有差到让我无法工作吗</strong>？没有，说实在的我写的代码不需要多高的性能，而且XPS13搭载了8GB内存和256G的固态硬盘，单论性能而言，我认为和MacBook Air 2019不相伯仲。</p>
</li>
</ul>
</li>
<li>
<p>我十分喜爱macOS；同时作为一名果粉，我非常欣赏苹果的软件和硬件产品，一直有着收集“苹果全家桶“的小心思。所以自从2019年11月发布以来，我一直很想购买这台在网上口碑很不错的MacBook Pro来达成苹果全家桶的”成就“。</p>
</li>
</ol>
<p><strong>综上所述：选择购买一台MacBook Pro的边际收益太低，这并不是什么迫切的需求，而且还包含了冲动<del>情怀</del>消费的因素。</strong></p>
<h2 id="如果不买呢后续的方案是怎样的">如果不买呢？后续的方案是怎样的？</h2>
<p>继续在家使用XPS13工作，或者我可以花费最多5000元购入一台i5+RX580配置的台式机，既可以玩游戏也可以安装黑苹果系统写代码。后者这种方案相比于购买一台MacBook Pro，对我而言只损失了一块素质很棒的MacBook Pro屏幕。</p>
<h2 id="如果买呢后续的方案是怎样的">如果买呢？后续的方案是怎样的？</h2>
<ol>
<li>
<p>在家这三个月使用MacBook Pro，将XPS13送给家人使用<del>吃灰</del>，他们对于电子产品的使用体验并没有多高的要求。这样一来，算上我以前的游戏本，我家就多出两台闲置的笔记本电脑，尽管性能都还不错。</p>
</li>
<li>
<p>到学校以后，关于是继续使用MacBook Pro还是戴尔台式机，我使用下面一张表格进行分析：</p>
<p>MacBook Pro输掉的环节用X标记，胜利的环节用O标记。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>戴尔台式机</th>
<th>MacBook Pro</th>
</tr>
</thead>
<tbody>
<tr>
<td>性能X</td>
<td>i7-6C12T 16GB 250G SSD</td>
<td>i7-6C12T 16GB 500GB SSD 散热降频</td>
</tr>
<tr>
<td>散热X</td>
<td>无需考虑</td>
<td>有散热压力</td>
</tr>
<tr>
<td>系统稳定性</td>
<td>系统从未崩溃过</td>
<td>无需考虑</td>
</tr>
<tr>
<td>接口X</td>
<td>USB-A USB-C 3.5mm</td>
<td>USB-C 3.5mm</td>
</tr>
<tr>
<td>显示O</td>
<td>4K 27寸 确实有些大 而且视角不可调是硬伤</td>
<td>Retina+我十分喜欢的原彩显示</td>
</tr>
<tr>
<td>外设X</td>
<td>可以选择购买无线鼠标键盘，替代现有的有线套装</td>
<td>手感稀烂的妙控键盘+我感觉还是比不上鼠标方便的触摸板</td>
</tr>
<tr>
<td>逼格O</td>
<td>0</td>
<td><code>0x7FFFFFFF</code></td>
</tr>
<tr>
<td>维护成本</td>
<td>0</td>
<td>娇气的T2芯片，屏幕涂层，金属外壳的维修成本+购置各种扩展坞和清洁套装的成本</td>
</tr>
<tr>
<td>使用体验</td>
<td>昂着头看屏幕，不爽，但是可以把书放到显示器下面看书学习</td>
<td>笔记本用起来视线舒服不少，但是学习时键盘占了不少位置，书只能放在电脑的旁边</td>
</tr>
</tbody>
</table>
<p>通过上面一张表格的分析，可以分别得到两种方案的亮点：</p>
<ul>
<li>戴尔台式机：强大的性能，良好的散热，齐全的接口，顺手的外设<del>以及白嫖</del></li>
<li>MacBook Pro：素质极佳的屏幕，极高的逼格<del>有用吗电脑又不能把妹只能吸引肥宅</del></li>
</ul>
<p>综上所述，我到学校以后大概率不会选择使用MacBook Pro，况且我对我调教好的黑苹果主机一直都十分满意。如果我到学校非要使用MacBook Pro的话，一是降低了使用体验<del>花钱找罪受</del>，二是戴尔台式机被闲置，造成了浪费，多管理一台电脑也会浪费我的精力。</p>
<h2 id="总结">总结</h2>
<p>经过我的疯狂分析，我得出了购买一台MacBook Pro并不能让我的生活变得更好的结论，我得到的只有为期至多三个月的略微提升的电脑使用体验（相较于XPS13更好的处理器和屏幕），而我却要为这一点提升支付17399元，并造成了两台还性能不错的电脑的闲置。</p>
<p>因此，在收到这台MacBook Pro 21小时后，我做出了退货的决定。</p>
<p>EOF</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hello World!</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/helloworld/" />
            <id>https://example.com/posts/helloworld/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-03-04T16:59:31+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[我的个人博客上线了！ 从2月24日写下第一行Django代码起，十天之后，我的Hugo……]]></summary>
            
                <content type="html"><![CDATA[<p><em>我的个人博客上线了！</em></p>
<p>从2月24日写下第一行<code>Django</code>代码起，十天之后，我的<code>Hugo</code>博客终于上线了！</p>
<p>第一次产生写些什么的想法是在大二看了知乎上一个讲互联网内容分发的文章时产生的，文章提到现在的互联网上绝大多数人都是内容的消费者，而这样只输入不输出的习惯时间久了实际上会影响一个人的表达能力，当时的我已经感到自己的文字表达能力退化了不少<del>强过吗</del>，因此决心以后找一个地方存放自己的想法。</p>
<p>关于个人信息记录，我做过的尝试有知乎专栏（有点丑说实话），各式各样的笔记应用（我还买过一年的Bear高级会员订阅，虽然后面11个月根本就没有打开过了），始终感觉不够装逼。后来学习了包括Java SSM和<code>Django</code>在内的Web开发技术，开始打算自己写一个博客网站。于是2月24日开始看<a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/">教程</a>动手，选择了<code>Django</code>+阿里云主机+阿里云域名的组合，在奋战了8天以后，发现不会前端技术的我使用模板继承套出来的博客又丑又难用，在书写<code>Markdown</code>内容时还会产生奇怪的Bug，而且在VPS部署新的后台代码时Git各种各样的操作让人崩溃，最后阿里云域名备案时还产生了死锁：我的河北省身份证无法在我读书的湖南省备案，然而想在河北省备案又需要京津冀的手机号。不过总的说来，这次使用<code>Django</code>写博客的经历还是学会了不少东西：</p>
<ul>
<li>Django框架简单使用</li>
<li>Linux进一步学习和第一次实践：阅读了<code>The Linux Command Line</code>一书的大部分内容，学习了<code>Vim</code>编辑器的一些奇技淫巧</li>
<li>Git的重新学习和实践：阅读了<code>Pro Git</code>一书的部分章节</li>
<li>一些<code>Unix</code>工具学习：进程控制工具<code>supervisor</code>，Python HTTP服务器<code>Gunicorn</code>，反向代理服务器<code>Nginx</code></li>
<li>复习了一些计算机网络的基础知识并领略了这些知识的实际落地形式</li>
</ul>
<p>在解决一些<code>Django</code>博客问题的过程中，我发现了许多漂亮的个人博客，这些博客基本都是采用<code>Hexo</code>，<code>Hugo</code>等静态网页生成器生成静态页面然后部署在<code>GitHub Pages</code>上的方案，于是被上面奇奇怪怪问题困扰<del>懒</del>的我毅然采用了<code>Hugo</code>和<code>GitHub Pages</code>的方案，学习了一下午<code>Hugo</code>的使用方法以后，我发现这才是我想要的：简单，迅速，部署容易，即使不会前端的我也可以下载各种主题然后修改配置文件定制我的博客。</p>
<p>3月4日，我用了一个通宵的时间修改配置文件，用Python写了一个部署新博文的脚本，又在GoDaddy购买了新的域名<del>可怜了我11块在阿里云买的keiksy.tech</del>，然后按照这篇<a href="https://mogeko.me/2019/056/">博客</a>的方法，在Cloudflare上做了CDN，并搞了一个HTTPS<del>以提升逼格</del>，现在你看到的博客自豪地采用了<code>Hugo</code>主题<code>MemE</code>，网站标题栏的字体是<code>Euphoria</code>，我看到这个字体的第一眼就爱上了。接下来的打算是将之前写的一些算法题题解搬运到这边，并选择一些更合适的字体，宋体这么文艺的字体显然并不适合书写技术博客。</p>
<p>EOF</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">TCP&RDP原理简述</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/tcprdp%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/" />
            <id>https://example.com/posts/tcprdp%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/</id>
            <updated>2020-04-21T15:27:34+08:00</updated>
            <published>2020-03-04T04:41:04+08:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[RDT &amp; TCP 本文总结了可靠数据传输协议（RDT）和传输控制协议（TCP）的原理和工作方法，……]]></summary>
            
                <content type="html"><![CDATA[<h1 id="rdt--tcp">RDT &amp; TCP</h1>
<p>本文总结了可靠数据传输协议（RDT）和传输控制协议（TCP）的原理和工作方法，主要参考了《自顶向下》。</p>
<h1 id="可靠数据传输原理">可靠数据传输原理</h1>
<h2 id="为什么需要rdt协议">为什么需要RDT协议？</h2>
<p>RDT位于运输层，其下方的网络层，链路层均不是可靠的，在下面的层上传输数据，数据可能会丢失（丢包），可能会损坏（bit翻转），也可能会乱序发送。为了保证上层应用层的应用程序能够正常地工作，需要在运输层构建可靠的数据传输协议，保证接收方得到的数据的完整和正确。</p>
<p>下面，我们会从最完美的假设开始构建RDT协议，再逐步地模拟真实通信的情况，进而完善RDT协议。</p>
<h2 id="本文的约定">本文的约定</h2>
<p>在发送方，应用层通过rdt_send()调用rdt协议传输数据，运输层通过udt_send()调用网络层发送数据。</p>
<p>在接收方，运输层通过rdt_rcv()调用网络层接收数据，运输层再通过deliver_data操作将确认的报文传给应用层协议。</p>
<p>应用层使用AL（Application Layer）表示，运输层使用TL（Transportation Layer）表示，网络层使用NL（Network Layer）表示。</p>
<p>1，2，3，4等序号表明一次网络通信过程中双方交互的动作顺序。</p>
<h2 id="rdt-10">RDT 1.0</h2>
<p>RDT 1.0对于底层信道的假设是完全可靠的，因此不需要设计任何附加的措施来保证数据可靠传输。</p>
<p><strong>发送方</strong>：当应用层准备好发送数据时，只需调用rdt_send()传给运输层，运输层直接加上报文头发给网络层。</p>
<p><strong>接收方</strong>：当网络层收到数据时，只需调用rdt_rcv()传给运输层，运输层直接多路分解发送给应用层。</p>
<h2 id="rdt-2-series">RDT 2 Series</h2>
<p>RDT 2 Series假设分组中的位可能受损，导致数据损坏。但是还是不会丢包。</p>
<h3 id="rdt-20">RDT 2.0</h3>
<p>考虑一个生活中的例子：A给B打电话，B准确地收到了A的消息后会说“OK”（用ACK信号表示），示意A继续说，如果A说了一句模糊不清的话，B会说“没听清”（用NAK信号表示），示意A重说一遍刚才的话。这里的ACK和NAK就是两个控制报文，控制报文可以让发送方知道哪些内容被正确接收，哪些内容接收有误并且需要重传。</p>
<p>在计算机网络中，进行位差错检测有多种算法，这些算法通常会在报文上附加几个检测位，并且这些算法从数学上保证了正确。</p>
<p><strong>发送方</strong>：</p>
<p>1.AL调用rdt_send()后，TL生成运输层报文，然后调用udt_send()发给NL。然后发送方开始等待接收方的控制报文。</p>
<p>3.如果收到ACK报文，转回1，如果收到NAK报文，重传数据包，直到收到ACK为止。</p>
<p><strong>接收方</strong>：</p>
<p>2.NL收到数据，调rdt_rcv()发给运输层，然后运输层检测数据位错误，如果没错，发送ACK报文给发送方，如果有错，发送NAK报文给发送方。</p>
<p>当发送方收到接收方的控制报文之前，不可以发送下一个数据，只能等着，因此RDT 2.0是一个停等协议。</p>
<h3 id="rdt-21">RDT 2.1</h3>
<p>在RDT 2.0中，没有考虑到ACK和NAK控制报文受损的情况，我们采用在报文中添加一个数据分组的序号字段来解决这个问题，对于停等协议，0和1两个标志就足够了，因为我们只需要区分目前</p>
<p><strong>发送方</strong>：</p>
<p>1.AL调用rdt_send()，TL发送0号分组给NL，转入等待接收方控制报文状态。</p>
<p>3.如果收到控制报文，发现或者分组损坏或者是NAK，则重传0号分组，发现是ACK，则等待AL准备好1号分组。</p>
<p>4.AL调用rdt_send()，TL发送1号分组给NL，转入等待接收方控制报文状态。</p>
<p>6.如果收到控制报文，发现或者分组损坏或者是NAK，则重传1号分组，发现是ACK，则等待AL准备好0号分组。</p>
<p><strong>接收方</strong>：</p>
<p>2.等待发送方的0号分组，NL收到后发给TL，TL检验后若有错，传回NAK，若没错，并且是0号分组，传回ACK，进入等待1号报文的状态。</p>
<p>5.等待发送方的1号分组，NL收到后发给TL，TL检验后若有错，传回NAK。若没错，并且是0号分组，证明第2步发送的ACK报文损坏，导致发送方重传0号分组，现在只需要传回ACK，再接着等待1号分组就可以了。若没错，并且是1号分组，则传回ACK，进入等待0号报文的状态。</p>
<h3 id="rdt-22">RDT 2.2</h3>
<p>其实NAK控制报文也是不需要的，假设接收方已经确认了0号报文，发回了ACK0，然后接受1号报文时发现了报文损坏，则再次发回ACK0，发送方收到两个ACK0，就知道接收方没有正确收到0号报文之后的报文，这就是RDT 2.2相对于2.1的改进。</p>
<p><strong>发送方</strong>：</p>
<p>1.AL调用rdt_send()，TL发送0号分组给NL，转入等待接收方控制报文状态。</p>
<p>3.如果收到控制报文，发现或者分组损坏或者是ACK1，则重传0号分组，发现是ACK0，则等待AL准备好1号分组。</p>
<p>4.AL调用rdt_send()，TL发送1号分组给NL，转入等待接收方控制报文状态。</p>
<p>6.如果收到控制报文，发现或者分组损坏或者是ACK0，则重传1号分组，发现是ACK1，则等待AL准备好0号分组。</p>
<p><strong>接收方</strong>：</p>
<p>2.等待发送方的0号分组，NL收到后发给TL，TL检验后若有错或者是1号分组，则传回ACK1，并继续等待0号分组。若没错并且是0号分组，则发送ACK0，进入等待1号分组的状态。</p>
<p>5.如果收到控制报文，若发现分组损坏，则返回ACK0（要求重传1号分组），若发现是0号分组（证明上次ACK0传输出错，发送方重传0号分组），则返回ACK0，继续等待1号分组。若发现是1号分组，传回ACK1，进入等待0号分组的状态。</p>
<h2 id="rdt-30">RDT 3.0</h2>
<p>RDT 3.0假设信道不仅会出错，还会出现丢包。</p>
<p>RDT 3.0让发送方负责检测和解决丢包，假设发送方发送了一个分组，该分组或者接收方的ACK发生了丢包，这两种情况下发送方都收不到任何响应，如果发送方等待了足够长的时间并确定分组已经丢失，则只需要重传该分组即可。如果等待时间设置错误（过短），导致的冗余分组的处理方法RDT 2.2已经涉及，即采用分组序号。</p>
<p>在RDT 3.0中，为了实现基于时间的重传机制，设置了一个倒数定时器，在规定的时间过后会中断发送方。发送方需要做到：</p>
<ol>
<li>每次发送一个分组时，启动一个定时器。</li>
<li>采取适当的动作响应定时器中断。</li>
<li>当分组确认后，终止定时器。</li>
</ol>
<p>相较于RDT 2.2，RDT3.0的变化就是发送方发送分组后启动定时器，等待ACK时若定时器超时就重传并重启定时器，若收到正确的ACK就关闭定时器。</p>
<h2 id="流水线rdt">流水线RDT</h2>
<p>由于上面涉及到的RDT是一个串行的停等协议，对于通信链路的利用率低的可怕，因此可以对发送方进行流水线化改造，即允许发送方在收到上一个分组的ACK之前就发送下一个分组，为了进行多个分组的同时传输，现在有必要为每个分组指定唯一的分组序号，同时发送方和接收方要可以缓存多个分组。有两种可以解决流水线错误的协议。</p>
<h3 id="回退n步协议go-back-n-stepsgbn">回退N步协议（Go Back N-Steps，GBN）</h3>
<p>事实上就是滑窗法，发送方维护一个当前发送分组的窗口，如果n号分组和之前的分组全部确认，接收方才返回ACKn信号，只要发生乱序（提前收到之后的分组，我要5号你给我6号）直接丢弃分组，并返回最后一个有序的分组n的ACKn，然后发送方重传n+1号及之后的分组，这种确认方法被称为累积确认。</p>
<h3 id="选择重传selective-repeatsr">选择重传（Selective Repeat，SR）</h3>
<p>在GBN中，单个分组的出错就能引起大量重传，事实上很多分组没有必要重传，这样做就造成了性能下降。SR的做法是在接收方也维护一个窗口，
窗口的左端点是顺序接收的最后一个分组的下一个，只要在窗口范围内的分组，哪怕失序到达也可以先缓存好。</p>
<h1 id="传输控制协议tcp工作方式">传输控制协议（TCP）工作方式</h1>
<p>在保证数据可靠传输方面，TCP的基本原理和上述RDT一致，下面就流量控制，拥塞控制和连接管理等方面来讨论TCP协议。</p>
<h2 id="流量控制">流量控制</h2>
<p>一条TCP链接的每侧主机都为该链接设置了缓存，如果发送方发送数据太快而接收方读取缓存数据太慢（比如接收方正在忙别的）
就会导致接收方缓存溢出，流量控制机制即为解决这个问题而诞生。事实上流量控制是一个速度匹配服务。</p>
<p>流量控制依靠在TCP报文中加入对本机的剩余缓存量实现。最终达到互相通知缓存剩余量的目的。</p>
<h2 id="连接管理">连接管理</h2>
<p>这里讨论了建立和拆除一条TCP连接时发生的事情。三次握手四次挥手的详细步骤见《自顶向下》。</p>
<p>下面引用了<a href="https://www.zhihu.com/question/24853633/answer/115173386">知乎上的一个回答</a></p>
<blockquote>
<p>TCP可靠传输的精髓： TCP连接的一方A，由操作系统动态随机选取一个32位长的序列号(Initial Sequence Number)，假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001, 1002，1003..... 并把自己的初始序列号ISN告诉B，让B有一个思想准备，什么样编号的数据是合法的，什么编号是非法的，比如编号900就是非法的，同时B还可以对A每一个编号的字节数据进行确认。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。</p>
</blockquote>
<blockquote>
<p>同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001， 2002， 2003.... 并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001,则意味着字节编号为2001-4000,共2000个字节已经安全到达。</p>
</blockquote>
<blockquote>
<p>一句话概括，TCP连接握手，握的就是通信双方数据原点的序列号!</p>
</blockquote>
<h2 id="拥塞控制">拥塞控制</h2>
<p>总地来说，拥塞是由于发送速率过快，中间路由器缓存或者通信链路容量不足而导致的丢包。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" term="计算机基础" label="计算机基础" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/%E7%BD%91%E7%BB%9C/" term="网络" label="网络" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/%E6%80%BB%E7%BB%93/" term="总结" label="总结" />
                            
                        
                    
                
            
        </entry>
    
</feed>
